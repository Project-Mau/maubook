[condition="if:mau.pelican:"]
----
:pelican.title:Blocks: built-in types and other features
:pelican.date:2021-10-19 13:00:00 +0100
:pelican.slug:maubook-blocks-built-in-types-and-other-features
:pelican.series:Mau - A template-based markup language
:pelican.series_index:11
:pelican.image:maubook/card
----

[condition="if:mau.chapter_headers:"]
----
= Blocks: built-in types and other features
----

[quote]
----
Over an inner wall he saw the pinnacles of strangely shaped towerlike structures. One of these towers was built in, or projected into the court in which he found himself, and a broad stair led up to it, along the side of the wall.
----
Robert E. Howard, "The Pool of the Black One" (1933)

Mau provides some built-in block types that are rendered in a different way.

== Quotes

The simplest block type that Mau provides is called `quote`. This block's content is the quote itself, while the secondary content is the source of the quote, commonly called attribution.

. Mau source
[source]
++++
[quote]
----
Learn about the Force, Luke.
----
_Star Wars_, 1977
++++

. HTML output
[source,html]
----
<blockquote>
  <p>Learn about the Force, Luke.</p>
  <cite>
    <p><em>Star Wars</em>, 1977</p>
  </cite>
</blockquote>
----

You can see the output of blocks `quote` rendered at the beginning of each chapter in this book.

== Admonitions

Mau supports admonitions, special blocks that are meant to be highlighted and separated from the rest of the text. For example, admonitions can be rendered with an icon on the side, or with a different background and a title. This generally includes asides, notes, warnings, tips, and other similar blocks of text.

The block is specified as `[admonition, CLASS, ICON, LABEL]`.

. Mau source
[source]
++++
[admonition, note, "fa-solid fa-circle-info", "Info"]
----
This is my note
----
++++

. HTML output
[source,html]
----
<div class="admonition note">
  <i class="fa-solid fa-circle-info"/>
  <div class="content">
    <div class="title">Info</div>
    <div>
      <p>This is my note</p>
    </div>
  </div>
</div>
----

[rendered]
++++
[admonition, note, "fa-solid fa-circle-info", "Info"]
----
This is an example of admonition rendered with a title and a specific colour for the border and the background.
----
++++

== Block conditions

You can conditionally render a block according to the result of a test. The test is expressed in the form `CONDITION:VARIABLE:[VALUE]` and is passed to the block through the attribute `condition`.

. Mau source
[source]
++++
:render:yes

[aside, condition="if:render:yes"]
----
This will be rendered
----

[aside, condition="if:render:no"]
----
This will not be rendered
----
++++

[rendered]
++++
:render:yes

[aside, condition="if:render:yes"]
----
This will be rendered
----

[aside, condition="if:render:no"]
----
This will not be rendered
----
++++

You can use boolean values leaving out the `VALUE` part

[source, callouts="|"]
++++
:render:

[aside, condition="if:render:"]
----
This will be rendered
----

:!render:

[aside, condition="if:render:"]
----
This will not be rendered
----
++++

[rendered]
++++
:render:

[aside, condition="if:render:"]
----
This will be rendered
----

:!render:

[aside, condition="if:render:"]
----
This will not be rendered
----
++++

You can reverse the condition using `ifnot`

[source, callouts="|"]
++++
:render:

[aside, condition="ifnot:render:"]
----
This will not be rendered
----
++++

[rendered]
++++
:render:

[aside, condition="ifnot:render:"]
----
This will not be rendered
----
++++

Conditions can be used even without the block type, which can be used to conditionally render standard paragraphs.

[source, callouts="|"]
++++
:detailed:

[condition="if:detailed:"]
----
This will be rendered only when the variable `detailed` is true.
----

[condition="ifnot:detailed:"]
----
This will be rendered only when the variable `detailed` is false
----
++++

== Block classes

You can add custom classes to a block using the attribute `classes`, which is a comma separated list of names. These classes will be then rendered according to the output format. For example, in HTML these will become CSS classes.

[source]
++++
[aside, classes="myclass1,myclass2"]
----
This is a block of type `aside` with additional classes
----
++++

. HTML output
[source,html]
----
<div class="aside myclass1 myclass2 ">
  <div class="content">
    <p>This is a block of type <code>aside</code> with additional classes</p>
  </div>
</div>
----

== Including content

As mentioned in the chapter about basic syntax, the directive `#include` can be used at any point (at the beginning of the line), and this means that the content of the block can be generated including the content of an external file.

. Mau source
[source]
++++
[aside]
----
\::#include:/path/to/important_aside.mau
----
++++

This might be very useful for `source` blocks (see the dedicated chapter)

. Mau source
[source]
++++
[source, python]
----
\::#include:/path/to/myscript.py
----
++++

::footnotes:
