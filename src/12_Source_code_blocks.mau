[condition="if:mau.pelican:"]
----
:pelican.title:Source code blocks
:pelican.date:2021-10-19 13:30:00 +0100
:pelican.slug:maubook-source-code-blocks
:pelican.series:Mau - A template-based markup language
:pelican.series_index:12
:pelican.image:maubook/card
----

[condition="if:mau.chapter_headers:"]
----
= Source code blocks
----

[quote]
----
The older authorities seemed rather more helpful than the newer ones, and Armitage concluded that the code of the manuscript was one of great antiquity, no doubt handed down through a long line of mystical experimenters.
----
H.P. Lovecraft, "The Dunwich Horror" (1929)

For programmers, one of the most useful features of a markup language is source code blocks. Mau provides full support to source code highlighting, and allows you to highlight single lines and add callouts to the code to mark specific steps of the process or to add explanations.

== Basic source blocks

Verbatim paragraphs and source code can be printed using blocks of type `source`

. Mau source
[source]
++++
. Source code
[source]
----
This is all verbatim.

== This is not a header

[These are not attributes]
----
++++

[rendered]
++++
. Source code
[source]
----
This is all verbatim.

== This is not a header

[These are not attributes]
----
++++

You can specify the language of the source code, that can be used by highlighting tools.

[condition="if:mau.output_format:html"]
----
Highlighting in HTML is provided by [link](https://pygments.org/,Pygments). On the official website you can find the list of [link](https://pygments.org/languages/,"supported languages").
----

[condition="if:mau.output_format:tex"]
----
Highlighting for TeX is not provided by default inside Mau. This book has been highlighted using [link]("https://ctan.org/pkg/minted?lang=en","minted").
----

. Mau source
[source]
++++
[source,python]
----
def header_anchor(text, level):
    """
    A simple Python function
    """

    return "h{}-{}-{}".format(
        level, quote(text.lower())[:20], str(id(text))[:8]
    )  # pragma: no cover
----
++++

[rendered]
++++
[source,python]
----
def header_anchor(text, level):
    """
    A simple Python function
    """

    return "h{}-{}-{}".format(
        level, quote(text.lower())[:20], str(id(text))[:8]
    )  # pragma: no cover
----
++++

== Callouts

Source blocks support callouts, that allow you to add notes to specific lines of code. Callouts are added at the end of the line between colons (e.g. `:1:`) the relative text is added to the secondary content of the block

. Mau source
[source, callouts="|"]
++++
[source,python]
----
def header_anchor(text, level)::1:
    return "h{}-{}-{}".format(
        level, quote(text.lower())[:20], str(id(text))[:8]:2:
    )  # pragma: no cover
----
1: The name of the function
2: Some memory-related wizardry
++++

[condition="if:mau.output_format:html"]
%%%%
[rendered]
++++
[source,python]
----
def header_anchor(text, level)::1:
    return "h{}-{}-{}".format(
        level, quote(text.lower())[:20], str(id(text))[:8]:2:
    )  # pragma: no cover
----
1: The name of the function
2: Some memory-related wizardry
++++

Callouts are rendered in HTML with `span` tags and the relative text is rendered in a table

. Mau source
[source, callouts="|"]
++++
[source,python]
----
a=5:1:
----
1: A simple assignment
++++

. HTML output
[source, html]
----
<div class="source">
  <div class="content">
    <div class="highlight">
      <pre>
	<span/>
	<span class="n">a</span>
	<span class="o">=</span>
	<span class="mi">5</span>
	<span class="callout">1</span>:@:
      </pre>
    </div>
  </div>
  <div class="callouts">
    <table>:@:
      <tbody>:@:
	<tr>:@:
	  <td>:@:
	    <span class="callout">1</span>:@:
	  </td>:@:
	  <td>A simple assignment</td>:@:
	</tr>:@:
      </tbody>:@:
    </table>:@:
  </div>
</div>
----
%%%%

[condition="if:mau.output_format:tex"]
%%%%
Callouts are not supported by the TeX package `minted`, so they are not rendered in this PDF.
%%%%

The default delimiter for callouts is a colon `:`, but if that clashes with the syntax of your language you can pick a different one with the attribute `callouts`

. Mau source
[source]
++++
[source, python, callouts="|"]
----
def header_anchor(text, level):|1|
    return "h{}-{}-{}".format(
        level, quote(text.lower())[:20], str(id(text))[:8]|2|
    )  # pragma: no cover
----
1: The name of the function
2: Some memory-related wizardry
++++

[condition="if:mau.output_format:html"]
%%%%
[rendered]
++++
[source,python,callouts="|"]
----
def header_anchor(text, level):|1|
    return "h{}-{}-{}".format(
        level, quote(text.lower())[:20], str(id(text))[:8]|2|
    )  # pragma: no cover
----
1: The name of the function
2: Some memory-related wizardry
++++
%%%%

---

Callouts names are just strings, not manipulated by Mau, so you can use them out of order

. Mau source
[source,callouts="|"]
++++
[source,python]
----
def header_anchor(text, level)::1:
    return "h{}-{}-{}".format(:3:
        level, quote(text.lower())[:20], str(id(text))[:8]:2:
    )  # pragma: no cover
----
1: The name of the function
2: Some memory-related wizardry
3: This is the return value
++++

[condition="if:mau.output_format:html"]
%%%%
[rendered]
++++
[source,python]
----
def header_anchor(text, level)::1:
    return "h{}-{}-{}".format(:3:
        level, quote(text.lower())[:20], str(id(text))[:8]:2:
    )  # pragma: no cover
----
1: The name of the function
2: Some memory-related wizardry
3: This is the return value
++++
%%%%

Callouts are not limited to digits, you can use non-numeric labels

. Mau source
[source,callouts="|"]
++++
[source,python]
----
def header_anchor(text, level)::step1:
    return "h{}-{}-{}".format(:step3:
        level, quote(text.lower())[:20], str(id(text))[:8]:step2:
    )  # pragma: no cover
----
1: The name of the function
2: Some memory-related wizardry
3: This is the return value
++++

[condition="if:mau.output_format:html"]
%%%%
[rendered]
++++
[source,python]
----
def header_anchor(text, level)::step1:
    return "h{}-{}-{}".format(:step3:
        level, quote(text.lower())[:20], str(id(text))[:8]:step2:
    )  # pragma: no cover
----
1: The name of the function
2: Some memory-related wizardry
3: This is the return value
++++
%%%%

Callouts do not need to have a definition

. Mau source
[source,callouts="|"]
++++
[source,python]
----
def header_anchor(text, level)::1:
    return "h{}-{}-{}".format(
        level, quote(text.lower())[:20], str(id(text))[:8]:2:
    )  # pragma: no cover
----
++++

[condition="if:mau.output_format:html"]
%%%%
[rendered]
++++
[source,python]
----
def header_anchor(text, level)::1:
    return "h{}-{}-{}".format(
        level, quote(text.lower())[:20], str(id(text))[:8]:2:
    )  # pragma: no cover
----
++++
%%%%

And you can reference them in the text using `[class](1, "callout")`, and rendering it accordingly.

== Highlight lines

You can highlight lines using a callout with the special name `@`

. Mau source
[source,highlight='#',callouts='|']
++++
[source,python]
----
def header_anchor(text, level)::@:
    return "h{}-{}-{}".format(
        level, quote(text.lower())[:20], str(id(text))[:8]:@:
    )  # pragma: no cover
----
++++

[condition="if:mau.output_format:html"]
%%%%
[rendered]
++++
[source,python]
----
def header_anchor(text, level)::@:
    return "h{}-{}-{}".format(
        level, quote(text.lower())[:20], str(id(text))[:8]:@:
    )  # pragma: no cover
----
++++

Should you prefer to list the lines you want to highlight you can use Pygments directly, passing the configuration value `hl_lines` under the namespace `pygments`

. Mau source
[source]
++++
[source,python,pygments.hl_lines="1,3"]
----
def header_anchor(text, level):
    return "h{}-{}-{}".format(
        level, quote(text.lower())[:20], str(id(text))[:8]
    )  # pragma: no cover
----
++++

[rendered]
++++
[source,python,pygments.hl_lines="1,3"]
----
def header_anchor(text, level):
    return "h{}-{}-{}".format(
        level, quote(text.lower())[:20], str(id(text))[:8]
    )  # pragma: no cover
----
++++
%%%%

::footnotes:
