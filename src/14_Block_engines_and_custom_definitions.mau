[condition="if:mau.pelican:"]
----
:pelican.title:Block engines and custom definitions
:pelican.date:2021-10-19 14:00:00 +0100
:pelican.slug:maubook-block-engines-and-custom-definitions
:pelican.series:Mau - A template-based markup language
:pelican.series_index:14
:pelican.image:maubook/card
----

[condition="if:mau.chapter_headers:"]
----
= Block engines and custom definitions
----

[quote]
----
- “Impact minus twenty seconds, guys. . . ” said the computer.

- “Then turn the bloody engines back on!” bawled Zaphod.

- “OK, sure thing, guys,” said the computer.
----
Douglas Adams, "The Hitchhiker's Guide to the Galaxy" (1979)

So far we saw how Mau treats standard blocks, the built-in types `quote`, `admonition`, and `source`, and how to render blocks conditionally. Blocks have another advanced feature called `engine`, which rule the way Mau processes the content of the block.

== Block engines

In blocks, an `engine` is the way Mau processes content and attributes to create the values eventually passed to the template used to render the block.

When a block doesn't define a specific engine the `default` one is used. Mau currently defines six engines:

* `default`
* `source`
* `raw`
* `mau`
* `footnote`
* `reference`

=== Default

The engine `default` processes the content of the block as Mau code using the variables defined previously in the document. It adds the headers found in the block to the global TOC and the footnotes to the list of the document footnotes.

This engine is used when no other engine is defined explicitly and is useful every time we need to customise the way the content is rendered in the final format but we want to keep the content as part of the document.

=== Raw

The engine `raw` is useful every time we want to include text in the output format directly, as this engine doesn't process the content at all. For example, if we are converting the Mau source in HTML and we want to add custom HTML code we can do it with

. Mau source
[source]
++++
[aside, engine=raw]
----
<div>This is a custom div written directly in HTML</div>
----
++++

Please note that while the content of the block is not processed by Mau it is still rendered as any other block through templates. See the following chapters to find out how to include custom content without any wrapper.

=== Mau

As we saw previously, the engine `default` processes the content as Mau code and adds variables, headers and footnotes in the current document. The engine `mau` does the same, but treats it as isolated content, without loading the variables defined in the main document, and without adding headers and footnotes to the relative lists.

Using a command `::toc:` in a block rendered by the engine `mau`, for example, will include only the headers defined in the block itself.

. Mau source
[source,callouts="|"]
%%%%
[aside,engine=mau]
----
= Main section

== Secondary section

== Another secondary section

=== A very specific section

::toc:
----
%%%%

[condition="if:mau.output_format:html"]
%%%%
[rendered,engine=mau]
----
= Main section

== Secondary section

== Another secondary section

=== A very specific section

::toc:
----
%%%%

Please note that even with this engine the content of the block is still rendered in the current document. This means that with output formats like TeX that create their own TOC automatically such headers will still be part of the main document.

=== Source

The engine that processes source blocks is aptly called `source`. This engine scans the primary content for callouts and looks for their optional definitions in the secondary content.

Blocks of type `source` are a shortcut notation to use the engine `source`. The notation

. Mau source
[source,callouts="|"]
%%%%
[source]
----
Some source code
----
%%%%

is equivalent to

. Mau source
[source,callouts="|"]
%%%%
[default, engine=source]
----
Some source code
----
%%%%

The explicit use of the engine `source` is useful to create custom source blocks that can behave like the built-in one but can be rendered in different ways. The way to do it will be shown in the chapter about templates.

=== Footnotes and references

The two engines `footnotes` and `references` process the content independently from the main document, keeping headers and variables isolated, and store the content into a global list that can be rendered with the relative commands `::footnotes:` and `::references:`. As happened for `source`, blocks of type `footnote` and `reference` are actually default blocks using the engine with the same name behind the scenes.

== Custom block definitions

As we saw in previous chapters and in the previous sections, blocks have many attributes that you can set on them. In the future chapters about templates we will also see how you can create and use custom attributes.

Setting the same parameters over and over can become tedious and error prone, so Mau provides a way to define blocks through the command `defblock`.

. Mau source
[source,callouts="|"]
++++
::defblock:python, default, engine=source, language=python

[python]
----
a = 5
----
++++

which equivalent to

. Mau source
[source,callouts="|"]
++++
[default, engine=source, language=python]
----
a = 5
----
++++

and is rendered as

[rendered]
%%%%
::defblock:python, default, engine=source, language=python

[python]
----
a = 5
----
%%%%

The syntax of a block definition is

. Mau source
[source,callouts="|"]
----
::defblock:ALIAS, BLOCKTYPE, ATTRIBUTE1, ATTRIBUTE2, ...
----

where `ALIAS` is the name you will use in your Mau document with `[ALIAS]` and `BLOCKTYPE` is the actual block type that corresponds to that alias.

The attributes can have a default value or not. If they have no value they need to be specified when using the alias. For example the following definition

[source,callouts="|"]
----
::defblock:mysource, aside, language, engine=source
----

defines `mysource` as an alias for the block type `aside`, and requires the attribute `language` to be provided. The attribute `engine`, instead, has a default value and can be omitted. So, the following two blocks are both valid

[source,callouts="|"]
++++
[mysource, python]
----
a = 5
----

[mysource, python, engine=raw]
----
a = 5
----
++++

while omitting a value for `language` will result in a syntax error

[source,callouts="|"]
++++
// This block is not valid
[mysource]
----
a = 5
----
++++

Block definitions are static aliases, so it is perfectly fine to write a definition like

. Mau source
[source,callouts="|"]
----
::defblock:myblock, myblock, engine=raw, classes="myclass1,myclass2"
----

which allows to use the type `myblock` in conjunction with a default set of arguments.

== Predefined blocks

As we saw in the previous sections, Mau defines provides some aliases out of the box. While these are created directly in the Python soruce code, they are equivalent to the following definitions

. Mau source
[source,callouts="|"]
----
::defblock:source, default, language=text, engine=source
::defblock:footnote, default, name, engine=footnote
::defblock:reference, default, type, name, engine=reference
::defblock:admonition, admonition, class, icon, label
----

The built-in block type `quote` is not an alias and doesn't contain additional attributes, so it works just like a `default` block.

::footnotes:
