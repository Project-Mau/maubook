:pelican.title:Block Engines and Custom Definitions

[condition="if:mau.pelican:"]
----
:pelican.series:maubook
:pelican.series_index:15
:pelican.template:doc
----

[id=block-engines-and-custom-definitions]
= {pelican.title}

[*quote]
----
- “Impact minus twenty seconds, guys. . . ” said the computer.

- “Then turn the bloody engines back on!” bawled Zaphod.

- “OK, sure thing, guys,” said the computer.
----
Douglas Adams, _The Hitchhiker's Guide to the Galaxy_ (1979)

== Block engines

Mau blocks have an advanced feature called `engine`, which rules the way Mau processes the content of the block.

In blocks, an `engine` is the way Mau processes content and attributes to create the values eventually passed to the template used to render the block.

When a block doesn't define a specific engine the `default` one is used. Mau currently defines six engines:

* `default`
* `source`
* `footnote`
* `reference`
* `raw`
* `mau`

=== Default

The engine `default` processes the content of the block as Mau code using the variables defined previously in the document. It adds the headers found in the block to the global TOC and the footnotes to the list of the document footnotes.

This engine is used when no other engine is defined explicitly and is useful every time we need to customise the way the content is rendered in the final format but we want to keep the content as part of the document.

We saw examples of this engine when we discussed quotes and admonitions.

=== Source

The engine that processes source blocks is aptly called `source`. This engine scans the primary content for callouts and looks for their optional definitions in the secondary content.

[condition="if:mau.website:"]
----
The block subtype `source` that we saw in [link](\{filename}11_Code_blocks.mau", "Code blocks") is a shortcut notation to use the engine `source`. The notation `[*source]` is equivalent to `[engine=source]`.
----

[condition="ifnot:mau.website:"]
----
The block subtype `source` that we saw in [header](code-blocks) is a shortcut notation to use the engine `source`. The notation `[*source]` is equivalent to `[engine=source]`.
----

[condition="if:mau.website:"]
----
The explicit use of the engine `source` is useful to create custom source blocks that can behave like the built-in one but can be rendered in different ways. The way to do it will be shown in the [link](\{filename}16_Basic_templates.mau", "Basic templates").
----

[condition="ifnot:mau.website:"]
----
The explicit use of the engine `source` is useful to create custom source blocks that can behave like the built-in one but can be rendered in different ways. The way to do it will be shown in the [header](basic-templates).
----

=== Footnotes and references

The two engines `footnotes` and `references` process the content independently from the main document, keeping headers and variables isolated, and store the content into a global list that can be rendered with the relative commands `::footnotes:` and `::references:`.

As happened for `source`, `[*footnote]` is translated into `[engine=footnotes]` and `[*reference]` into `[engine=references]`.

=== Raw

The engine `raw` is useful every time we want to include text in the output format directly, as this engine doesn't process the content at all. For example, you might want to add custom HTML code.

[condition="if:mau.website:"]
####
The following is an example from the UI kit I used for this website

. Mau source
[*source]
++++
[engine=raw]
----
<button type="button" class="btn btn-primary">
  Notifications <span class="badge badge-light ml-1">4</span>
</button>
----
++++

[*rendered]
++++
[engine=raw]
----
<button type="button" class="btn btn-primary">
  Notifications <span class="badge badge-light ml-1">4</span>
</button>
----
++++

Please note that while the content of the block is not processed by Mau it is still rendered as any other block through templates. See [link](\{filename}16_Basic_templates.mau", "Basic templates") to find out how to include custom content without any wrapper.
####

[condition="ifnot:mau.website:"]
----
Please note that while the content of the block is not processed by Mau it is still rendered as any other block through templates. See [header](basic-templates) to find out how to include custom content without any wrapper.
----

=== Mau

As we saw previously, the engine `default` processes the content as Mau code and adds variables, headers and footnotes in the current document. The engine `mau` does the same, but treats it as isolated content, without loading the variables defined in the main document, and without adding headers and footnotes to the relative lists.

Using a command `::toc:` in a block rendered by the engine `mau`, for example, will include only the headers defined in the block itself.

. Mau source
[*source,callouts="|"]
%%%%
[engine=mau]
----
= Main section

== Secondary section

---
::toc:
----
%%%%

[condition="if:mau.visitor.format:html"]
%%%%
[*rendered,engine=mau]
----
= Main section

== Secondary section

---
::toc:
----
%%%%

Please note that even with this engine the content of the block is still rendered in the current document. This means that with output formats like TeX that create their own TOC automatically such headers will still be part of the main document.

== Custom block definitions

[condition="if:mau.website:"]
----
As we saw previously, blocks have many attributes that you can set on them. In [link](\{filename}16_Basic_templates.mau", "Basic templates") and [link](\{filename}17_Advanced_templates.mau", "Advanced templates") we will also see how you can create and use custom attributes.
----

[condition="ifnot:mau.website:"]
----
As we saw previously, blocks have many attributes that you can set on them. In [header](basic-templates) and [header](advanced-templates) we will also see how you can create and use custom attributes.
----

Setting the same parameters over and over can become tedious and error prone, so Mau provides a way to define blocks through the command `::defblock:ALIAS, ARGUMENTS`.

. Mau source
[*source,callouts="|"]
++++
::defblock:python, engine=source, language=python

[*python]
----
class MyException(Exception):
    pass
----
++++

This is equivalent to

. Mau source
[*source,callouts="|"]
++++
[engine=source, language=python]
----
class MyException(Exception):
    pass
----
++++

=== Mandatory arguments and defaults

The full syntax of a block definition is

. Mau source
[*source,callouts="|"]
----
::defblock:ALIAS, [*SUBTYPE], [UNNAMED ARGUMENTS], [NAMED ARGUMENTS]
----

but the aliasing mechanism doesn't work as a pure substitution.

* `SUBTYPE` is going to be the block subtype. If missing, the subtype will not be set on the block.
* `UNNAMED ARGUMENTS` are interpreted as *mandatory arguments*.
* `NAMED ARGUMENTS` are interpreted as *defaults values*.

For example, `::defblock:alias, *type1, name` means that whenever we use `alias` as the block subtype we also have to provide either an unnamed argument (which will be assigned the key `name`) or a named argument called `name`.

. Mau source
[*source,callouts="|"]
++++
::defblock:alias, arg1, key1=value1

[*alias]
----
This is invalid, as it is missing the unnamed argument
----

[*alias, alert]
----
This is valid.
Unnamed arguments: []
Named arguments: {"arg1": "alert", "key1": "value1"}.
----

[*alias, alert, red]
----
This is valid.
Unnamed arguments: ["red"]
Named arguments: {"arg1": "alert", "key1": "value1"}.
----

[*alias, alert, red, key1=anothervalue]
----
This is valid.
Unnamed arguments: ["red"]
Named arguments: {"arg1": "alert", "key1": "anothervalue"}.
----

[*alias, red, arg1=alert]
----
This is valid.
Unnamed arguments: ["red"]
Named arguments: {"arg1": "alert", "key1": "anothervalue"}.
----
++++

As you can see, block definitions do not work exactly like functions in programming languages. Block attributes can always contain any number of unnamed and named arguments, and the block definition just specifies which *named ones* we are always expecting to see.

=== Recursive subtypes

Block definitions are not recursive, so it is perfectly fine to write a definition like

. Mau source
[*source,callouts="|"]
----
::defblock:alias, *alias, engine=raw, classes="myclass1,myclass2"
----

In this case the syntax `[*alias]` will be converted to `[*alias, engine=raw, classes="myclass1,myclass2]` and the block will still have the subtype `alias`.

== Predefined blocks

As we saw in the previous sections, Mau provides some aliases out of the box, namely `source`, `footnote`, `reference`, and `admonition`. While these are created directly in the Python soruce code, they are equivalent to the following definitions

. Mau source
[*source,callouts="|"]
----
::defblock:source, language=text, engine=source
::defblock:footnote, name, engine=footnote
::defblock:reference, type, name, engine=reference
::defblock:admonition, *admonition, class, icon, label
----

The built-in block type `quote` is not an alias and doesn't contain additional attributes, so it works just like a default block.

== Block definitions in configuration

You can create block definitions through Mau's configuration setting the variable `mau.parser.block_definitions`

. Mau source
[*source,callouts="|"]
----
"mau" : {
    "parser": {
        "block_definitions": {
            "alias": {
                "subtype": "type",
                "mandatory_args": ["arg1", "arg2"],
                "defaults": {"key1": "value1"},
            },
        },
    }
}
----


::footnotes:
