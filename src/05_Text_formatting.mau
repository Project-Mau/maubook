:pelican.title:Text Formatting

[condition="if:mau.pelican:"]
----
:pelican.series:maubook
:pelican.series_index:4
:pelican.template:doc
----

[id=text-formatting]
= {pelican.title}

[*quote]
----
Leafing through the pages, he saw the book was printed in two colours. There seemed to be no pictures, but there were large, beautiful capital letters at the beginning of the chapters. 
----
Michael Ende, _The Neverending Story_ (1979)

== Basic styles

Inside paragraphs (and in other elements that support it) you can use text formatting which allows you to give text a certain style. Text formatting is done through symbols, enclosing a set of words between two identical symbols. Currently Mau supports `_underscores_`, `*stars*`, `~tildes~`, `^carets^`, and `\`backticks\``.

. Mau source
[*source]
----
Stars identify *strong* text.

Underscores for _emphasized_ text.

Carets for ^superscript^ and tildes for ~subscript~.

Backticks are used for `verbatim` text.
----

[*rendered]
----
Stars identify *strong* text.

Underscores for _emphasized_ text.

Carets for ^superscript^ and tildes for ~subscript~.

Backticks are used for `verbatim` text.
----

---

Text styles can be used together but backticks have a very strong behaviour in Mau

. Mau source
[*source]
----
You can have _*strong and empashized*_ text.

You can also apply styles to _*`verbatim`*_.

But verbatim will `_*preserve*_` them.
----

[*rendered]
----
You can have _*strong and empashized*_ text.

You can also apply styles to _*`verbatim`*_.

But verbatim will `_*preserve*_` them.
----

---

Styles can be applied to only part of a word and do not need spaces

. Mau source
[*source]
----
*S*trategic *H*azard *I*ntervention *E*spionage *L*ogistics *D*irectorate

It is completely _counter_intuitive.

Parts of words can be ^super^script or ~sub~script.

There are too many `if`s in this function.
----

[*rendered]
----
*S*trategic *H*azard *I*ntervention *E*spionage *L*ogistics *D*irectorate

It is completely _counter_intuitive.

Parts of words can be ^super^script or ~sub~script.

There are too many `if`s in this function.
----

---

Using a single style marker doesn't trigger any effect. If you need to use two of them in the sentence, though, you have to escape at least one

. Mau source
[*source]
----
You can use _single *markers.

But you \_need\_ to escape pairs.

Even though you can escape \_just one_ of the two.

If you have \_more than two\_ it's better to just \_escape\_ all of them.

Oh, this is valid for `verbatim as well.
----

[*rendered]
----
You can use _single *markers.

But you \_need\_ to escape pairs.

Even though you can escape \_only one_ of the two.

If you have \_more than two\_ it's better to just \_escape\_ all of them.

Oh, this is valid for `verbatim as well.
----

== Text classes

You can assign specific classes to part of the text using the macro `class`. The way classes are used and rendered depends on the output format. If the output is HTML, those will become CSS classes, while PDF output at the moment doesn't do anything specific.

. Mau source
[*source]
----
This is [class]("text wrapped", myclass) in a class.
----

The HTML output of the code above is

. HTML output
[*source,html]
----
<p>This is <span class="myclass">text wrapped</span> in a class.</p>
----

---

You can specify multiple classes providing them in a comma-separated string

. Mau source
[*source]
----
This is [class]("text wrapped", "myclass1,myclass2") in multiple classes.
----

Resulting in

. HTML output
[*source,html]
----
<p>This is <span class="myclass1 myclass2">text wrapped</span> in multiple classes.</p>
----

Please note that the text passed to the macro `class` can contain Mau code such as styles.

. Mau source
[*source]
----
This is [class]("*text with styles* _wrapped_", "myclass") in a class.
----

== Horizontal rule

You can add a separator or horizontal rule using three dashes `---` on a separate line.

. Mau source
[*source]
----
---
----

[*rendered]
----
---
----

::footnotes:
