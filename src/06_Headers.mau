[condition="if:mau.pelican:"]
----
:pelican.title:Headers
:pelican.date:2021-10-19 10:30:00 +0100
:pelican.slug:maubook-headers
:pelican.series:Mau - A template-based markup language
:pelican.series_index:6
:pelican.image:maubook/card
----

[condition="if:mau.chapter_headers:"]
----
= Headers
----

[quote]
----
The abbot gave him a brief glare and began reading. The silence was awkward. “You found this over in the ‘Unclassified’ section, I believe?” he asked after a few seconds.
----
Walter M. Miller Jr., "A Canticle for Leibowitz" (1959)

To properly structure some text you need to divide it into sections and the best way to highlight sections is through headers. Mau supports them and automatically stores them in a table of context.

To create a header in Mau use the symbol `=` followed by the text of the header

. Mau source
[source]
----
= A very important section
----

. HTML output
[source,html]
----
<h1 id="a-very-important-section">A very important section</h1>
----

[rendered, engine=mau, condition="if:mau.output_format:html"]
----
= A very important section
----

As you can see Mau converts it into a tag `h1` and automatically assigns an ID to it. The level of the header is ruled by the number of `=` symbols that you use. So, to create a header of level 3 you can write

. Mau source
[source]
----
=== A less important section
----

. HTML output
[source,html]
----
<h3 id="a-less-important-section">A less important section</h3>
----

[rendered, engine=mau, condition="if:mau.output_format:html"]
----
=== A less important section
----

== Headers and TOC

Mau stores all headers in a Table of Contents that can be created with the command `::toc:`

. Mau source
[source,callouts="|"]
----
= Main section

== Secondary section

== Another secondary section

=== A very specific section

::toc:
----

This will be rendered as

. HTML output
[source,html]
----
<h1 id="main-section-06bc">Main section</h1>
<h2 id="secondary-section-3cbf">Secondary section</h2>
<h2 id="another-secondary-section-1dac">Another secondary section</h2>
<h3 id="a-very-specific-section-feca">A very specific section</h3>
<div>
  <ul>
    <li><a href="#main-section-06bc">Main section</a>
      <ul>
        <li><a href="#secondary-section-3cbf">Secondary section</a></li>
        <li><a href="#another-secondary-section-1dac">Another secondary section</a>
          <ul>
            <li><a href="#a-very-specific-section-feca">A very specific section</a></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</div>
----

[rendered, engine=mau, condition="if:mau.output_format:html"]
----
= Main section

== Secondary section

== Another secondary section

=== A very specific section

::toc:
----

You can avoid including a specific header in the TOC adding a tag and excluding it from the TOC using the argument `exclude_tag`. This will also exclude all children of that node.

. Mau source
[source,callouts="|"]
----
= Section 1

== Section 1.1

[#notoc]
== Section 1.2

=== Section 1.2.1

== Section 1.3

::toc:exclude_tag=notoc
----

[rendered, engine=mau, condition="if:mau.output_format:html"]
----
= Section 1

== Section 1.1

[#notoc]
== Section 1.2

=== Section 1.2.1

== Section 1.3

::toc:exclude_tag=notoc
----

This will exclude from the rendered TOC both `Section 1.2` and `Section 1.2.1`, but not `Section 1.3`.

== Anchors

Headers are automatically assigned an identifier by Mau, which is linked in the Table of Contents.

. Mau source
[source]
----
= A very important section
----

. HTML output
[source,html]
----
<h1 id="a-very-important-section">A very important section</h1>
----

The identifier is generated by an internal function that takes into account the text and the level of the header to avoid clashes. However, the ID is NOT granted to be unique. The function that generates the identifier can be replaced when using Mau programmatically, providing it in the variable `mau.header_anchor_function`.

For example you can do something like

[source,python]
----
def custom_header_anchor(text, level):
    return f"{text[:5]}-{level}"

config = {
    "header_anchor_function": custom_header_anchor
}

...

mau = Mau(
    "/some/source/path",
    visitor_class=visitor_class,
    config=config,
)
----

::footnotes:
