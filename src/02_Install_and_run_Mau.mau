:pelican.title:Install and Run Mau

[condition="if:mau.pelican:"]
----
:pelican.series:maubook
:pelican.series_index:1
:pelican.template:doc
----

[id=install-and-run-mau]
= {pelican.title}

[*quote]
----
I’ll tell you. I’m going to install a visiplate right over my desk. Right on the wall over there, see!
----
Isaac Asimov, _I, Robot_ (1950)


This chapter details how to install Mau both as a stand-alone tool and as a plugin for Pelican. The only requirements are a working Python3 installation and a virtual environment.

While Python comes preinstalled in several operating systems these days, you can find detailed instructions on how to install it on the Python official website. Virtual environments are covered in the official documentation, but you might want to also explore tools to manage them, like [link](https://github.com/pyenv/pyenv,pyenv). However, these are not mandatory to run Mau.

== Install Mau as a stand-alone tool

Mau is available [link]("https://pypi.org/project/mau/", "on PyPI") and to install it you just need to run

[*source]
----
pip install mau
----

At this point you should have the command line tool `mau` available. You can test it with

[*source]
----
mau --version
----

You can get help directly on the command line running

[*source]
----
mau --help
----

The option `-f` is used to specify the output format, and the only output available out of the box is `yaml`, which prints out the Abstract Syntax Tree using YAML. To render Mau source code you need a _visitor plugin_.

At the moment there are two plugins available: the [link]("https://pypi.org/project/mau_html_visitor/", "HTML visitor") and the [link]("https://pypi.org/project/mau_tex_visitor/", "TeX visitor"). You can install only one of them or both.

[*source]
----
pip install mau-html-visitor
pip install mau-tex-visitor
----

Now, if you run `mau --help` you will see the new output format available to the option `-f`.

== Run Mau as a stand-alone tool

The simplest command line for Mau is

[*source]
----
mau -f FORMAT -i INPUT
----

that reads the Mau source file `INPUT` and converts it into the desired format saving the output in a file called `INPUT.EXT`, where `EXT` is a suitable extension that depends on the chosen format. If the input file has the extension `.mau` that will be automatically removed.

If you want to specify the output format and the name of the output file you can use the two options `-f` and `-o`

[*source]
----
mau -f FORMAT -i INPUT -o OUTPUT
----

where `FORMAT` is one of the output formats that Mau supports, and both `INPUT` and `OUTPUT` are full paths, extensions included.

=== Example

Make sure you installed the HTML visitor and create the file `test.mau` in the current directory with this content

[*source]
----
= A test

This is a test for the Mau markup processor.
----

Now you can run

[*source]
----
mau -f html -i test.mau -o test.html
----

That will parse the content of `test.mau` and render it as HTML into `test.html`. The content of that file is

[*source,html]
----
<html>
  <head>
  </head>
  <body>
    <h1 id="a-test-aae2">A test</h1>
    <p>This is a test for the Mau markup processor.</p>
  </body>
</html>
----

(minus the formatting which was added here for clarity)

You can now open the output file with your browser

[*source]
----
firefox test.html
----

and enjoy your first document created with Mau.

=== Configuration file

Mau supports a configuration file written in YAML that can be loaded with the option `-c`

[*source]
----
mau -c config.yml -f html -i test.mau -o test.html
----

[condition="if:mau.website:"]
----
Each value defined in the config file is stored as a variable under the namespace `mau`, and can be used in the Mau source. A complete description of the configuration file can be found in [link](\{filename}20_Configuration.mau, "Configuration"). You can learn more about variables in Mau documents in [link](\{filename}08_Variables.mau, "Variables").
----

[condition="ifnot:mau.website:"]
----
Each value defined in the config file is stored as a variable under the namespace `mau`, and can be used in the Mau source. A complete description of the configuration file can be found in [header](configuration). You can learn more about variables in Mau documents in [header](variables).
----

== Using Mau programmatically

[condition="if:mau.website:"]
----
You can use Mau programmatically in your Python code. See [link](\{filename}19_Python_interface.mau, "Python interface") to know more about the API.
----

[condition="ifnot:mau.website:"]
----
You can use Mau programmatically in your Python code. See [header](python-interface) to know more about the API.
----

That chapter also details how to use Mau to write posts and pages in [link](https://docs.getpelican.com/en/latest/, Pelican) through a specific plugin.

::footnotes:
