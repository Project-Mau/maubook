:pelican.title:Basic Templates

[condition="if:mau.pelican:"]
----
:pelican.series:maubook
:pelican.series_index:16
:pelican.template:doc
----

[id=basic-templates]
= {pelican.title}

[*quote]
----
'That's the idea,' replied Norton. 'This may be an indexed catalogue for 3-D images—templates—solid blueprints, if you like to call them that.'
----
Arthur C. Clarke, _Rendezvous with Rama_ (1973)

So far, Mau provides features similar to Markdown, Asciidoc, and other markup languages. The real power of Mau, however, relies in its use of templates to render the output of the syntax.

Everything you saw in the previous chapters is rendered as described thanks to the default Jinja templates provided by the visitors, but such templates can be easily customised to provide the output you prefer.

== A simple example

To start off on our journey with templates let's have a look a the simplest ones. You know that the Mau provides styles like

. Mau source
[*source]
----
Stars identify *important* text.
----

This piece of text is processed by Mau and the following Abstract Syntax Tree (AST) is created. A compact version of the AST is 

. Abstract Syntax Tree
[*source, yaml]
----
data:
  type: document
  content:
  - data:
      type: paragraph
      content:
      - data:
          type: text
          value: 'Stars identify '
      - data:
          type: style
          value: star
          content:
          - data:
              type: text
              value: important
      - data:
          type: text
          value: ' text.'
----

You can the AST at any time using the output format `yaml` on the command line

[*source]
----
mau -f yaml -i input.mau -o -
----

Once the AST has been created, the chosen visitor is used to render each node. In this case the nodes are of type `text`, `sentence`, `style`, `paragraph`, and `document`.

The `style` node in the previous AST is

[*source, yaml]
----
- data:
    type: style
    value: star
    content:
    - data:
        type: text
        value: important
----

Which involves the template `text.html` and `style.star.html`

.`text.html`
[*source, html+jinja]
----
{{ value }}
----

.`style.star.html`
[*source, html+jinja]
----
<strong>{{ content }}</strong>
----

The output of the style node will then be

. HTML output
[*source,html]
----
<strong>important</strong>.
----

And the output of the whole text will be

. HTML output
[*source,html]
----
<p>Stars identify <strong>important</strong> text.</p>
----

If we changed the template to

.`style.star.html`
[*source, yaml]
----
<span class="italic">{{ content }}</span>
----

the result would be

. HTML output
[*source,html]
----
<p>Stars identify <span class="italic">important</span> text.</p>
----

=== Jinja

Templates are currently implemented using the [link]("https://jinja.palletsprojects.com/en/3.1.x/", "Jinja templating engine"). This means that inside templates you can use filters, statements, loops, and everything that Jinja provides.

In particular, you can leverage commands like `extends` and `include` to avoid repeating yourself and to tidy up the structure of your templates.

== Define templates

Mau templates can be provided in the YAML configuration or as individual files.

=== YAML Configuration file

Mau templates can be defined in the YAML configuration file using the key `custom_templates`. For example

[*source, yaml]
----
---
target_format: html
custom_templates:
  style.underscore.html: '<span class="bold">{{ content }}</span>'
  style.star.html: '<span class="italic">{{ content }}</span>'
----

This is a good solution for simple templates, but it might quickly become unmanageable if your templates include a lot of Jinja operators.

=== Individual files

You can store templates in individual files inside a directory and pass the latter to Mau through the configuration file with the key `templates_directory`.

[*source, yaml]
----
---
 target_format: html
 templates_directory: templates
----

The file has to be named after the template and have an extension matching the output format (see the paragraph about visitors). This is a good solution for complex templates, as it doesn't require to quote the text. You can also benefit from syntax highlighting in your editor while writing the template.

Template files can be created with a flat or nested structure. Each file can be created with its full name, so you can have

[*source]
----
templates/
  header.html
  source.html
  source.python.html
  source.javascript.html
  style.star.html
  style.underscore.html
----

or you can use each part of the dotted name as a subdirectory

[*source]
----
templates/
  header.html
  source.html
  source/
    python.html
    javascript.html
  style/
    star.html
    underscore.html
----

This is true at individual level, so you can mix the two styles

[*source]
----
templates/
  header.html
  source.html
  source.python.html
  source/
    javascript.html
  style/
    star.html
    underscore.html
----

== Visitor plugins

Mau provides a base visitor class `BaseVisitor` that produces the YAML AST I showed previously. It also provides a `JinjaVisitor` class that uses the powerful template engine [link]("https://jinja.palletsprojects.com/en/3.0.x/", "Jinja").

At the moment, there are also two plugins that provide a subclass of the `JinjaVisitor` and specifically target HTML (`mau-html-visitor`) and TeX (`mau-tex-visitor`). They can be installed in any virtual environment using `pip`

[*source]
----
pip install mau-html-visitor
pip install mau-tex-visitor
----

The two plugins provide default templates for their output format. You can see them in the relative repositories

* Mau HTML visitor: [link]("https://github.com/Project-Mau/mau-html-visitor")
* Mau TeX visitor: [link]("https://github.com/Project-Mau/mau-tex-visitor")

== Template plugins

Mau supports plugins that only add templates, such as `mau-docs-templates`. Such plugins provide only template files, without a specific visitor.

The templates provided by the plugin can be used directly as they are loaded by visitors, or can be included in your own templates using Jinja `extend` or `include`.


::footnotes:
